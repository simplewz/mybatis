<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- 1.properties标签：加载外部数据库配置文件-->
    <properties resource="DataSource.properties"/>

    <!-- 2.settings标签：配置myBatis框架的运行-->
    <settings>
        <!-- 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存-->
        <setting name="cacheEnabled" value="true"/>
        <!-- 延迟加载的全局开关,当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载 -->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!-- 是否允许单个语句返回多结果集（需要数据库驱动支持）-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!-- 使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察-->
        <setting name="useColumnLabel" value="true"/>
        <!-- 允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键-->
        <setting name="useGeneratedKeys" value="false"/>
        <!-- 指定 MyBatis 应如何自动映射列到字段或属性。
            NONE 表示关闭自动映射；
            PARTIAL 只会自动映射没有定义嵌套结果映射的字段。
            FULL 会自动映射任何复杂的结果集（无论是否嵌套）。
        -->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!-- 指定发现自动映射目标未知列（或未知属性类型）的行为
            NONE: 不做任何反应。（默认设置）
            WARNING: 输出警告日志（'org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN）
            FAILING: 映射失败 (抛出 SqlSessionException)
        -->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!-- 配置默认的执行器。
            SIMPLE 就是普通的执行器
            REUSE 执行器会重用预处理语句（PreparedStatement）
            BATCH 执行器不仅重用语句还会执行批量更新
        -->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!-- 设置超时时间，它决定数据库驱动等待数据库响应的秒数-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!-- 为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖-->
        <setting name="defaultFetchSize" value="100"/>
        <!-- 指定语句默认的滚动策略
            FORWARD_ONLY:
            SCROLL_SENSITIVE:
            SCROLL_INSENSITIVE:
            DEFAULT（等同于未设置,默认设置）
        -->
        <setting name="defaultResultSetType" value="DEFAULT"/>
        <!-- 是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!-- 是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false-->
        <setting name="safeResultHandlerEnabled" value="true"/>
        <!-- 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn,默认设置为false-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询,默认值为 SESSION。
            SESSION:  会缓存一个会话中执行的所有查询。
            STATEMENT:本地缓存将仅用于执行语句。对相同 SqlSession 的不同查询将不会进行缓存。-->
        <setting name="localCacheScope" value="SESSION"/>
        <!-- 当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。
             某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!-- 指定对象的哪些方法触发一次延迟加载-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!-- 配置控制台日志打印-->
        <setting name="logImpl" value="STDOUT_LOGGING"/>
    </settings>

    <!-- 3.typeAliases标签：类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。
        该标签中的配置项有顺序要求：单个typeAliases配置项的顺序需要在包配置项package之前,如果同时配置了typeAliases
        和package,则两者都会生效。
        需要特别注意：如果在类上使用了@Alias注解指定了类型别名，则注解配置的类型别名优先有效，且在xml配置中的类型别名不会生效.
        mybatis为常见的Java类定义了类型别名：可参见https://mybatis.org/mybatis-3/zh/configuration.html#settings
        页面中的typeAliases
    -->
    <typeAliases>
        <!-- 为一个类指定类型别名-->
        <typeAlias type="org.simple.mybatis.entity.Employee" alias="emp"></typeAlias>
        <!-- 每一个在指定包中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。
        比如 org.simple.mybatis.Employee 的别名为 employee/Employee；若有注解，则别名为其注解值-->
        <package name="org.simple.mybatis.entity"/>
    </typeAliases>

    <!-- 4.typeHandlers:类型处理器。
        MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。
        从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API）,如Java 8中的LocalDateTime日期转换支持。
        类型处理器的作用是解决Java数据类型与数据库数据类型之间的转换。
    -->
    <typeHandlers>
        <!--<typeHandler handler=""/>-->
        <!--<package name="org.simple.mybatis.handler"/>-->
    </typeHandlers>

    <!-- 5.objectFactory(对象工厂):
        每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。
        默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。
        如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。
        自定义对象工厂可以通过两种方式实现：
        1. 实现接口ObjectFactory接口。
        2. 通过继承MyBatis的DefaultObjectFactory类实现。
        要想使自定义的ObjectFactory类生效，需要在mybatis的配置文件中进行配置。
    -->
    <!--
    <objectFactory type="org.mybatis.example.ExampleObjectFactory">
        <property name="someProperty" value="100"/>
    </objectFactory>
    -->
    <!-- 6.plugins配置
        MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：
        Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
        ParameterHandler (getParameterObject, setParameters)
        ResultSetHandler (handleResultSets, handleOutputParameters)
        StatementHandler (prepare, parameterize, batch, update, query)

        通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。
    -->
    <!--
    <plugins>
        <plugin interceptor="org.mybatis.example.ExamplePlugin">
            <property name="someProperty" value="100"/>
        </plugin>
    </plugins>
    -->
    <!--7. environments环境配置
        mybatis环境配置，可根据情况配置多个环境,如开发环境：dev 测试环境：test 生产环境：prod
        可以使用default属性来切换环境
    -->
    <environments default="dev">
        <environment id="dev">
            <!-- 配置事物管理器-->
            <transactionManager type="JDBC"/>
            <!-- 配置数据源，type=POOLED表示使用池化技术-->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 8. 数据库厂商标识
        MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。
        MyBatis 会加载带有匹配当前数据库 databaseId 属性和所有不带 databaseId 属性的语句。
        如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。
        为支持多厂商特性，只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 即可
    -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="SQL Server" value="sqlserver"/>
        <property name="DB2" value="db2"/>
        <property name="Oracle" value="oracle" />
    </databaseIdProvider>

    <!-- 9. 映射器配置:映射器的作用是实现接口与SQL语句的绑定
         配置xml文件存放位置,该文件中存放了需要执行的SQL语句,mybatis默认该xml文件与定义的mapeer接口在同一包下
     -->
    <mappers>
        <package name="org.simple.mybatis.mapper"/>
        <!--
        <mapper class="org/simple/mybatis/mapper/EmployeeMapper.class"/>
        <mapper resource="org/simple/mybatis/mapper/EmployeeMapper.xml"/>
        <mapper url="file:///var/mappers/AuthorMapper.xml"/>
        -->
    </mappers>
</configuration>